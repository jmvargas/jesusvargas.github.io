<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog personal de Jesús Vargas</title>
    <link>//jmvargas.github.io/post/index.xml</link>
    <description>Recent content in Posts on Blog personal de Jesús Vargas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <copyright>Powered by [Hugo](//gohugo.io).</copyright>
    <lastBuildDate>Wed, 15 Feb 2017 23:07:31 +0100</lastBuildDate>
    <atom:link href="//jmvargas.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Stack Docker para aplicaciones PHP</title>
      <link>//jmvargas.github.io/2017/02/15/stack-docker-para-aplicaciones-php</link>
      <pubDate>Wed, 15 Feb 2017 23:07:31 +0100</pubDate>
      
      <guid>//jmvargas.github.io/2017/02/15/stack-docker-para-aplicaciones-php</guid>
      <description>

&lt;p&gt;En este, mi primer post os presento una simple y ligera stack usando Nginx, PHP-fpm y Postgres que, al menos a mí, me resulta muy útil para desarrollar aplicaciones PHP.&lt;/p&gt;

&lt;p&gt;Es un entorno pensado para usar en desarrollo y facilitar la transición a producción o a un entorno para ejecutar tests.&lt;/p&gt;

&lt;p&gt;Todos los containers de la stack están basados en la distro Alpine linux (~5Mb). Por lo que hace que esta stack sea idónea para escalar tu app de manera horizontal lanzando varios containers con herramientas como Docker swarm o Kubernetes.&lt;/p&gt;

&lt;h2 id=&#34;estructura-de-la-stack&#34;&gt;Estructura de la stack&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;├── app
│   ├── example.php # Example querying database
│   └── index.php # phpinfo
├── docker-compose.yml
├── log # (Created after run docker-compose)
│   ├── nginx # Nginx logs
│   └── php-fmp # PHP logs
├── .data # (Created after run docker-compose)
│   └── db # Database data
├── nginx
│   └── vhost.conf # VirtualHost conf file for Nginx
└── php-fpm
    ├── Dockerfile # PHP docker image, modify it to add PHP extensions, for example
    ├── php-fpm.conf # PHP-fpm conf file
    └── php.ini # php.ini file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La parte principal es el archivo docker-compose.yml. Analizémoslo por partes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Postgres
  db:
    restart: always
    image: postgres:9-alpine
    ports:
      - &amp;quot;5432:5432&amp;quot;
    environment:    
      POSTGRES_DB: database
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - .data/db:/var/lib/postgresql/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con este código lanzamos un container Postgres, mapeamos el puerto 5432 del container al puerto 5432 del host, creamos una base de datos (sólo la primera vez que lo arranquemos) y nos aseguramos que los datos de la base de datos queden en .data/db para no perderlos en caso de eliminar el container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # PHP
  phpfpm:
    restart: always
    build: php-fpm
    volumes:
      - ./php-fpm/php-fpm.conf:/usr/local/etc/php-fpm.conf
      - ./php-fpm/php.ini:/usr/local/etc/php/php.ini
      - ./app:/var/www/html
      - ./log/php-fpm:/var/log/php-fpm
    links:
      - db:db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Este código construye el Dockerfile de dentro del directorio php-fpm, monta el directorio app en /var/www/html, monta también algunos archivos de configuración y enlaza este container con el de la base de datos.&lt;/p&gt;

&lt;p&gt;El archivo Dockerfile sólo se debería tocar para instalar nuevas extensiones de PHP.&lt;/p&gt;

&lt;p&gt;Desde este container se podrán hacer peticiones al Postgres usando el host &lt;em&gt;db&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  # Nginx
  nginx:
    restart: always
    image: nginx:1-alpine
    ports:
      - &amp;quot;8888:80&amp;quot;
    links:
      - phpfpm:phpfpm
    volumes:
      - ./nginx/vhost.conf:/etc/nginx/conf.d/default.conf
      - ./app:/var/www/html
      - ./log/nginx:/var/log/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aquí se lanza un Nginx, montando el directorio app y algunos archivos de configuración. Además se configura un enlace con el container phpfpm y se mapea el puerto 80 del container al 8888 del host.&lt;/p&gt;

&lt;h2 id=&#34;ejecución&#34;&gt;Ejecución&lt;/h2&gt;

&lt;p&gt;Para levantar los distintos servicios sólo basta con ejecutar:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tras esto puedes visitar &lt;a href=&#34;http://localhost:8888&#34;&gt;http://localhost:8888&lt;/a&gt; y verás un phpinfo.&lt;/p&gt;

&lt;p&gt;Si visitas &lt;a href=&#34;http://localhost:8888/example.php&#34;&gt;http://localhost:8888/example.php&lt;/a&gt; verás un ejemplo simple de query a Postgres.&lt;/p&gt;

&lt;p&gt;El código lo tenéis aquí &lt;a href=&#34;https://github.com/jmvargas/docker-compose-php-stack&#34;&gt;https://github.com/jmvargas/docker-compose-php-stack&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>